A simple example project using the famous Iris dataset with a basic scikit-learn model. We'll use Databricks and MLflow for tracking parameters and metrics. In this example you already have a Databricks account and a cluster set up.

Create a Databricks Notebook:

Open your Databricks Workspace and create a new notebook.

Import Libraries:

import mlflow
import mlflow.sklearn
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_iris


Load and Split Data:

iris = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)
Train Random Forest Model:


# Set hyperparameters

n_estimators = 100
max_depth = 3

# Train model

model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)
model.fit(X_train, y_train)
Log Parameters and Metrics with MLflow:

# Log parameters

mlflow.log_param("n_estimators", n_estimators)
mlflow.log_param("max_depth", max_depth)

# Make predictions

predictions = model.predict(X_test)

# Calculate accuracy and log metric

accuracy = accuracy_score(y_test, predictions)
mlflow.log_metric("accuracy", accuracy)
Save Model with MLflow:

# Save model with MLflow

mlflow.sklearn.log_model(model, "random_forest_model")
View Results in MLflow UI:

Run the notebook in Databricks, and then navigate to the MLflow UI to view the experiment, compare runs, and download the saved model.





